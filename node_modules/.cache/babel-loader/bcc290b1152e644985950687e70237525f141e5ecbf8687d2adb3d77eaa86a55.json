{"ast":null,"code":"var _jsxFileName = \"E:\\\\chuhai\\\\shudu\\\\src\\\\SudokuGrid.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport './SudokuGrid.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SudokuGrid() {\n  _s();\n  const [board, setBoard] = useState(Array(9).fill(Array(9).fill(0)));\n  const [tempBoard, setTempBoard] = useState(Array(9).fill(Array(9).fill(0)));\n  const inputRefs = useRef(Array.from({\n    length: 9\n  }, () => Array(9).fill(null)));\n\n  //生成指定范围内的随机整数\n  function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  //对数组进行洗牌，即随机打乱数组中元素的顺序\n  function shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = getRandomInt(0, i);\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  }\n\n  //判断在指定位置放置特定数字是否符合数独规则，即同一行、同一列和同一3x3小格内不能有重复的数字\n  function isValid(board, row, col, num) {\n    for (let i = 0; i < 9; i++) {\n      if (board[row][i] === num && i !== col) {\n        return false; // 同一行存在重复数字\n      }\n      if (board[i][col] === num && i !== row) {\n        return false; // 同一列存在重复数字\n      }\n      const subgridRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n      const subgridCol = 3 * Math.floor(col / 3) + i % 3;\n      if (board[subgridRow][subgridCol] === num && (subgridRow !== row || subgridCol !== col)) {\n        return false; // 同一个3x3小格内存在重复数字\n      }\n    }\n    return true;\n  }\n\n  //通过递归的方式尝试填入数字，并验证是否符合数独规则，直到找到合适的解，或者无解为止。\n  function solveSudoku(board) {\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (board[i][j] === 0) {\n          const nums = shuffleArray([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n          for (let num of nums) {\n            if (isValid(board, i, j, num)) {\n              board[i][j] = num;\n              if (solveSudoku(board)) {\n                return true;\n              } else {\n                board[i][j] = 0;\n              }\n            }\n          }\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  useEffect(() => {\n    generateSudokuBoard();\n    // eslint-disable-next-line\n  }, []);\n\n  //生成数独棋盘的入口函数。它首先创建一个9x9的二维数组，并调用solveSudoku函数来填充数独棋盘。\n  function generateSudokuBoard() {\n    const solvedBoard = Array(9).fill().map(() => Array(9).fill(0));\n    solveSudoku(solvedBoard); // 生成完整的数独棋盘\n    const newBoard = JSON.parse(JSON.stringify(solvedBoard)); // 创建一个新的数独棋盘\n\n    const numToRemove = Math.floor(Math.random() * 9) + 40; // 随机生成要移除的数字的数量\n\n    for (let i = 0; i < numToRemove; i++) {\n      let row = Math.floor(Math.random() * 9);\n      let col = Math.floor(Math.random() * 9);\n      if (newBoard[row][col] !== 0) {\n        // 如果该位置的数字不为0，则将其设置为0\n        newBoard[row][col] = 0;\n      } else {\n        // 如果该位置的数字已经为0，则重新选择位置\n        while (newBoard[row][col] === 0) {\n          row = Math.floor(Math.random() * 9);\n          col = Math.floor(Math.random() * 9);\n        }\n        newBoard[row][col] = 0;\n      }\n    }\n    setBoard(newBoard);\n    setTempBoard(newBoard);\n  }\n  function handleInputChange(rowIndex, colIndex, e) {\n    const {\n      value\n    } = e.target;\n    const newTempBoard = tempBoard.map(row => [...row]);\n    if (value === '') {\n      newTempBoard[rowIndex][colIndex] = 0; // 用户删除了输入，将对应位置清空\n    } else if (/^[1-9]+$/.test(value)) {\n      const num = parseInt(value.slice(-1));\n      newTempBoard[rowIndex][colIndex] = num; // 符合数独规则，更新临时数独棋盘\n    }\n    const isInvalid = isValid(newTempBoard, rowIndex, colIndex, newTempBoard[rowIndex][colIndex]);\n    // 根据检查结果动态设置className\n    inputRefs.current[rowIndex][colIndex].className = isInvalid ? 'input' : 'input invalid';\n    setTempBoard(newTempBoard);\n    const isBoardFull = isBoardCompletelyFilled(newTempBoard);\n    const isSudokuValid = isSudokuBoardValid(newTempBoard);\n    if (isBoardFull && isSudokuValid) {\n      setTimeout(() => {\n        alert('挑战成功！🎉🎊');\n      }, 0);\n    }\n  }\n  function isBoardCompletelyFilled(board) {\n    for (let row of board) {\n      for (let cell of row) {\n        if (cell === 0) {\n          return false; // 发现未填满的位置，返回 false\n        }\n      }\n    }\n    return true; // 所有位置都已填满\n  }\n  function isSudokuBoardValid(board) {\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        const num = board[row][col];\n        if (num !== 0 && !isValid(board, row, col, num)) {\n          return false; // 存在不满足数独规则的数字\n        }\n      }\n    }\n    return true; // 所有数字都满足数独规则\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sudoku-board-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateSudokuBoard,\n      children: \"\\u51FA\\u9898\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"sudoku-board\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tempBoard.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((value, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: value || '',\n              readOnly: board[rowIndex][colIndex] !== 0 // 基于状态而不是基于输入的值\n              ,\n              onChange: e => handleInputChange(rowIndex, colIndex, e),\n              onClick: e => {\n                e.target.select();\n              } // 输入框获得焦点时选中文本\n              ,\n              ref: ref => inputRefs.current[rowIndex][colIndex] = ref\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 25\n            }, this)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 21\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 9\n  }, this);\n}\n_s(SudokuGrid, \"p7K9Gx0Vp3TK7jEprmSH7wPaA4U=\");\n_c = SudokuGrid;\nexport default SudokuGrid;\nvar _c;\n$RefreshReg$(_c, \"SudokuGrid\");","map":{"version":3,"names":["useEffect","useRef","useState","jsxDEV","_jsxDEV","SudokuGrid","_s","board","setBoard","Array","fill","tempBoard","setTempBoard","inputRefs","from","length","getRandomInt","min","max","Math","floor","random","shuffleArray","array","i","j","isValid","row","col","num","subgridRow","subgridCol","solveSudoku","nums","generateSudokuBoard","solvedBoard","map","newBoard","JSON","parse","stringify","numToRemove","handleInputChange","rowIndex","colIndex","e","value","target","newTempBoard","test","parseInt","slice","isInvalid","current","className","isBoardFull","isBoardCompletelyFilled","isSudokuValid","isSudokuBoardValid","setTimeout","alert","cell","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","readOnly","onChange","select","ref","_c","$RefreshReg$"],"sources":["E:/chuhai/shudu/src/SudokuGrid.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport './SudokuGrid.css'\r\n\r\nfunction SudokuGrid(){\r\n    const [board, setBoard] = useState(Array(9).fill(Array(9).fill(0)));\r\n    const [tempBoard, setTempBoard] = useState(Array(9).fill(Array(9).fill(0)));\r\n\r\n    const inputRefs = useRef(Array.from({ length: 9 }, () => Array(9).fill(null)));\r\n\r\n    //生成指定范围内的随机整数\r\n    function getRandomInt(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    //对数组进行洗牌，即随机打乱数组中元素的顺序\r\n    function shuffleArray(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = getRandomInt(0, i);\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return array;\r\n    }\r\n\r\n    //判断在指定位置放置特定数字是否符合数独规则，即同一行、同一列和同一3x3小格内不能有重复的数字\r\n    function isValid(board, row, col, num) {\r\n        for (let i = 0; i < 9; i++) {\r\n          if (board[row][i] === num && i !== col) {\r\n            return false; // 同一行存在重复数字\r\n          }\r\n          if (board[i][col] === num && i !== row) {\r\n            return false; // 同一列存在重复数字\r\n          }\r\n          const subgridRow = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n          const subgridCol = 3 * Math.floor(col / 3) + i % 3;\r\n          if (board[subgridRow][subgridCol] === num && (subgridRow !== row || subgridCol !== col)) {\r\n            return false; // 同一个3x3小格内存在重复数字\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n\r\n    //通过递归的方式尝试填入数字，并验证是否符合数独规则，直到找到合适的解，或者无解为止。\r\n    function solveSudoku(board) {\r\n        for (let i = 0; i < 9; i++) {\r\n          for (let j = 0; j < 9; j++) {\r\n            if (board[i][j] === 0) {\r\n              const nums = shuffleArray([1, 2, 3, 4, 5, 6, 7, 8, 9]);\r\n              for (let num of nums) {\r\n                if (isValid(board, i, j, num)) {\r\n                  board[i][j] = num;\r\n                  if (solveSudoku(board)) {\r\n                    return true;\r\n                  } else {\r\n                    board[i][j] = 0;\r\n                  }\r\n                }\r\n              }\r\n              return false;\r\n            }\r\n          }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    useEffect(() => {\r\n        generateSudokuBoard();\r\n        // eslint-disable-next-line\r\n    }, []);\r\n    \r\n    //生成数独棋盘的入口函数。它首先创建一个9x9的二维数组，并调用solveSudoku函数来填充数独棋盘。\r\n    function generateSudokuBoard() {\r\n        const solvedBoard = Array(9).fill().map(() => Array(9).fill(0));\r\n        solveSudoku(solvedBoard); // 生成完整的数独棋盘\r\n        const newBoard = JSON.parse(JSON.stringify(solvedBoard)); // 创建一个新的数独棋盘\r\n      \r\n        const numToRemove = Math.floor(Math.random() * 9) + 40; // 随机生成要移除的数字的数量\r\n      \r\n        for (let i = 0; i < numToRemove; i++) {\r\n          let row = Math.floor(Math.random() * 9);\r\n          let col = Math.floor(Math.random() * 9);\r\n          if (newBoard[row][col] !== 0) { // 如果该位置的数字不为0，则将其设置为0\r\n            newBoard[row][col] = 0;\r\n          } else {\r\n            // 如果该位置的数字已经为0，则重新选择位置\r\n            while (newBoard[row][col] === 0) {\r\n              row = Math.floor(Math.random() * 9);\r\n              col = Math.floor(Math.random() * 9);\r\n            }\r\n            newBoard[row][col] = 0;\r\n          }\r\n        }\r\n        setBoard(newBoard);\r\n        setTempBoard(newBoard);\r\n    }\r\n\r\n    function handleInputChange(rowIndex, colIndex, e) {\r\n        const { value } = e.target;\r\n        const newTempBoard = tempBoard.map((row) => [...row]);\r\n      \r\n        if (value === '') {\r\n          newTempBoard[rowIndex][colIndex] = 0; // 用户删除了输入，将对应位置清空\r\n        } else if (/^[1-9]+$/.test(value)) {\r\n          const num = parseInt(value.slice(-1));\r\n          newTempBoard[rowIndex][colIndex] = num; // 符合数独规则，更新临时数独棋盘\r\n        }\r\n      \r\n        const isInvalid = isValid(newTempBoard, rowIndex, colIndex, newTempBoard[rowIndex][colIndex]);\r\n        // 根据检查结果动态设置className\r\n        inputRefs.current[rowIndex][colIndex].className = isInvalid ? 'input' : 'input invalid';\r\n      \r\n        setTempBoard(newTempBoard);\r\n\r\n        const isBoardFull = isBoardCompletelyFilled(newTempBoard);\r\n        const isSudokuValid = isSudokuBoardValid(newTempBoard);\r\n        if (isBoardFull && isSudokuValid) {\r\n            setTimeout(() => {\r\n              alert('挑战成功！🎉🎊');\r\n            }, 0);\r\n        }\r\n      }\r\n\r\n      function isBoardCompletelyFilled(board) {\r\n        for (let row of board) {\r\n          for (let cell of row) {\r\n            if (cell === 0) {\r\n              return false; // 发现未填满的位置，返回 false\r\n            }\r\n          }\r\n        }\r\n        return true; // 所有位置都已填满\r\n      }\r\n\r\n      function isSudokuBoardValid(board) {\r\n        for (let row = 0; row < 9; row++) {\r\n          for (let col = 0; col < 9; col++) {\r\n            const num = board[row][col];\r\n            if (num !== 0 && !isValid(board, row, col, num)) {\r\n              return false; // 存在不满足数独规则的数字\r\n            }\r\n          }\r\n        }\r\n        return true; // 所有数字都满足数独规则\r\n      }\r\n\r\n    return (\r\n        <div className=\"sudoku-board-container\">\r\n            <button onClick={generateSudokuBoard}>出题</button>\r\n            <table className=\"sudoku-board\">\r\n            <tbody>\r\n                {tempBoard.map((row, rowIndex) => (\r\n                <tr key={rowIndex}>\r\n                    {row.map((value, colIndex) => (\r\n                    <td key={colIndex}>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={value || ''}\r\n                            readOnly={board[rowIndex][colIndex] !== 0} // 基于状态而不是基于输入的值\r\n                            onChange={(e) => handleInputChange(rowIndex, colIndex, e)}\r\n                            onClick={(e) => {e.target.select();}} // 输入框获得焦点时选中文本\r\n                            ref={(ref) => (inputRefs.current[rowIndex][colIndex] = ref)}\r\n                        />\r\n                    </td>\r\n                    ))}\r\n                </tr>\r\n                ))}\r\n            </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\nexport default SudokuGrid;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}